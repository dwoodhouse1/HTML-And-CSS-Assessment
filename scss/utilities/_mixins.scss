// ==========================================================================
// Mixins
// ==========================================================================

// BEM selectors

@mixin e($element) {
	&__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }

}

// Media queries

@mixin mq($break) {
	
	@if $break == "small" {
		@media (min-width: $brkpoint-sm) and (max-width: $brkpoint-lg) {
			@content;
		}
	}
	@else if $break == "medium" {
		@media (min-width: #{$brkpoint-md + 1}) { // had to use interpolation on the md variable as you cannot use logical operators in media queries
			@content;
		}
	}
	@else if $break == "large" {
		@media (min-width: $brkpoint-lg)  {
			@content;
		}
	}
	@else {
		@error "Whoops! No value could be retrieved for break for `#{$break}`";
	}
}

// Generate modifier color classes

@mixin bg-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color;    
		}
	}
}

// Generating :before or :after pseudo-element shapes

@mixin p-el(
	$el,
	$el-w: null,
	$el-h: null) {
	@if $el == "before" or $el == "after" { 
	  &:#{$el} {
		  @extend %pseudos;
		  width: $el-w;
	  	height: $el-h;
	    @content;
	  }
	} 
	@else {
    @error "`#{$el}` is not a valid pseudo-element.";
	}
}

// Image replacement

@mixin img-replace($img, $w, $h, $disp: block) {
	background-image: url('#{$path--rel}/#{$img}');
	background-repeat: no-repeat;
	width: $w;
	height: $h;
	display: $disp;
}

// Adjust sibling margins

@mixin doubly($margin: 1em) {
	& + & {
		margin-left: $margin;
		@content;
	}
}

// Grid columns 

@mixin g-columns {
	@for $i from 1 through $g-col-count {
        // Generate column modifier classes
    
        $context: g-context($g-col-width, $g-col-count, $g-gutter-width) !global; // !global makes the variables on the line global
        $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1)); 
        
        &--#{$i} {
            width: percentage($target / $context);
        }
    }
}